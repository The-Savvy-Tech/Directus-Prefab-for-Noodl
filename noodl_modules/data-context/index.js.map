{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@noodl/noodl-sdk/index.js","webpack:///./node_modules/zustand/vanilla.js","webpack:///./src/constants.js","webpack:///./src/utils.js","webpack:///./src/nodes/context.js","webpack:///./src/nodes/getState.js","webpack:///./src/nodes/setState.js","webpack:///./src/nodes/subscriber.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_colors","Noodl","defineNode","def","_def","displayNodeName","displayName","usePortAsLabel","useInputAsLabel","color","category","getInspectInfo","docs","initialize","this","inputs","_outputs","outputs","_this","setOutputs","flagOutputDirty","clearWarnings","context","editorConnection","nodeScope","componentOwner","id","sendWarning","message","apply","type","undefined","group","default","set","_key","changed","signals","valueChangedToTrue","_fn","signal","scheduleAfterInputsHaveUpdated","methods","prototypeExtensions","onNodeDeleted","_onNodeDeleted","__proto__","node","setup","defineCollectionNode","assign","Items","Fetch","sendSignalOnOutput","a","fetch","defineModelNode","Id","Fetched","_object","_changeListener","off","_o","on","data","properties","defineReactNode","getReactComponent","inputProps","inputCss","outputProps","frame","createStoreImpl","createState","state","listeners","Set","setState","partial","replace","nextState","is","_previousState","forEach","listener","getState","api","subscribe","add","destroy","clear","inputTypeEnums","label","getCircularReplacer","seen","WeakSet","has","toInspect","keys","reduce","result","item","length","JSON","stringify","toJSON","getContextInputProperties","contextNodes","contextName","filter","x","parameters","previous","contextInputs","prop","getContextOutputProperties","emptyContextObject","store","componentId","componentName","findContext","window","data_context_context","popupParent","parentNodeScope","parent","_inputValues","initialState","model","createContext","identifierOf","identifierDisplayName","allowEditOnly","_value","graphModel","isRunningLocally","_managePortsForNode","getNodesWithType","_updatePorts","ports","push","editorName","plug","enums","parentItemId","sendDynamicPorts","ev","success","failure","_internal","outputValues","registerOutputIfNeeded","updateState","error","console","hasOutput","registerOutput","substring","parameterUpdated","updatePortsFromContext","updateAll","args","contextParameters","detectRenamed","Do","newState","registerInputIfNeeded","hasInput","startsWith","registerInput","allowConnectionsOnly","isSubscribed","subscribed","Resubscribe","unsubscribe","flagDirty","defineModule","nodes","Context","Subscriber"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","const _colors = {\n    \"purple\":\"component\",\n    \"green\":\"data\",\n    \"default\":\"default\",\n    \"grey\":\"default\"\n}\n\nNoodl.defineNode = function(def) {\n    const _def = {};\n\n    _def.name = def.name;\n    _def.displayNodeName = def.displayName;\n    _def.usePortAsLabel = def.useInputAsLabel;\n    _def.color = _colors[def.color || 'default'];\n    _def.category = def.category || 'Modules';\n    _def.getInspectInfo = def.getInspectInfo;\n    _def.docs = def.docs;\n    \n    _def.initialize = function() {\n        this.inputs = {};\n        var _outputs = this.outputs = {};\n        var _this = this;\n\n        // Function for quickly setting outputs\n        this.setOutputs = function(o) {\n            for(var key in o) {\n                _outputs[key] = o[key];\n                _this.flagOutputDirty(key);\n            }\n        }\n\n        // Sending warnings\n        this.clearWarnings = (function() {\n            if(this.context.editorConnection && this.nodeScope && this.nodeScope.componentOwner)\n                this.context.editorConnection.clearWarnings(this.nodeScope.componentOwner.name, this.id);\n        }).bind(this);\n\n        this.sendWarning = (function(name,message) {\n            if(this.context.editorConnection && this.nodeScope && this.nodeScope.componentOwner)\n                this.context.editorConnection.sendWarning(this.nodeScope.componentOwner.name, this.id, name, {\n                    message: message\n                });\n        }).bind(this);\n\n        if(typeof def.initialize === 'function')\n            def.initialize.apply(this);\n    }\n    _def.inputs = {};\n    _def.outputs = {};\n\n    for(var key in def.inputs) {\n        _def.inputs[key] = {\n            type:(typeof def.inputs[key] === 'object')?def.inputs[key].type:def.inputs[key],\n            displayName:(typeof def.inputs[key] === 'object')?def.inputs[key].displayName:undefined,\n            group:(typeof def.inputs[key] === 'object')?def.inputs[key].group:undefined,\n            default:(typeof def.inputs[key] === 'object')?def.inputs[key].default:undefined,\n            set:(function() { const _key = key; return function(value) {\n                this.inputs[_key] = value;\n                if(def.changed && typeof def.changed[_key] === 'function') {\n                    def.changed[_key].apply(this,[value]);\n                }\n            }})()\n        }\n    }\n\n    for(var key in def.signals) {\n        _def.inputs[key] = {\n            type:'signal',\n            displayName:(typeof def.signals[key] === 'object')?def.signals[key].displayName:undefined,\n            group:(typeof def.signals[key] === 'object')?def.signals[key].group:undefined,\n            valueChangedToTrue:(function() { const _key = key; return function() {\n                const _fn = (typeof def.signals[_key] === 'object')?def.signals[_key].signal:def.signals[_key]\n                if(typeof _fn === 'function') {\n                    this.scheduleAfterInputsHaveUpdated(() => {\n                        _fn.apply(this);\n                    }) \n                }\n            }})()\n        }\n    }\n\n    for(var key in def.outputs) {\n        if(def.outputs[key] === 'signal') {\n            _def.outputs[key] = {\n                type:'signal',\n            }\n        }\n        else {\n            _def.outputs[key] = {\n                type:(typeof def.outputs[key] === 'object')?def.outputs[key].type:def.outputs[key],\n                displayName:(typeof def.outputs[key] === 'object')?def.outputs[key].displayName:undefined,\n                group:(typeof def.outputs[key] === 'object')?def.outputs[key].group:undefined,\n                getter:(function() { const _key = key; return function() {\n                    return this.outputs[_key];\n                }})()\n            }\n        }\n    }\n\n    _def.methods = _def.prototypeExtensions = {};\n    for(var key in def.methods) {\n        _def.prototypeExtensions[key] = def.methods[key];\n    }\n    if(_def.methods.onNodeDeleted) { // Override the onNodeDeleted if required\n        _def.methods._onNodeDeleted = function() {\n            this.__proto__.__proto__._onNodeDeleted.call(this);\n            _def.methods.onNodeDeleted.value.call(this);\n        }\n    }\n\n    return {node:_def,setup:def.setup};\n}\n\nNoodl.defineCollectionNode = function(def) {\n    const _def = {\n        name:def.name,\n        category:def.category,\n        color:'data',\n        inputs:def.inputs,\n        outputs:Object.assign({\n            Items:'array',\n            'Fetch Started':'signal',\n            'Fetch Completed':'signal'\n        },def.outputs||{}),\n        signals:Object.assign({\n            Fetch:function() {\n                var _this = this;\n                this.sendSignalOnOutput('Fetch Started');\n                var a = def.fetch.call(this,function() {\n                    _this.sendSignalOnOutput('Fetch Completed');\n                });\n                this.setOutputs({\n                    Items:a\n                })\n            }\n        },def.signals||{})\n    }\n\n    return Noodl.defineNode(_def);\n}\n\nNoodl.defineModelNode = function(def) {\n    const _def = {\n        name:def.name,\n        category:def.category,\n        color:'data',\n        inputs:{\n            Id:'string'\n        },\n        outputs:{\n            Fetched:'signal'\n        },\n        changed:{\n            Id:function(value) {\n                if(this._object && this._changeListener)\n                    this._object.off('change',this._changeListener)\n                \n                this._object = Noodl.Object.get(value);\n                this._changeListener = (name,value) => {\n                    const _o = {}\n                    _o[name] = value;\n                    this.setOutputs(_o)\n                }\n                this._object.on('change',this._changeListener)\n\n                this.setOutputs(this._object.data);\n                this.sendSignalOnOutput('Fetched');\n            }\n        },\n        initialize:function() {\n\n        }\n    }\n\n    for(var key in def.properties) {\n        _def.inputs[key] = def.properties[key];\n        _def.outputs[key] = def.properties[key];\n        _def.changed[key] = (function() { const _key = key; return function(value) {\n            if(!this._object) return;\n            this._object.set(_key,value);\n        }})()\n    }\n \n    return Noodl.defineNode(_def);\n}\n\nNoodl.defineReactNode = function(def) {\n    var _def = Noodl.defineNode(def);\n\n    _def.node.getReactComponent = def.getReactComponent;\n    _def.node.inputProps = def.inputProps;\n    _def.node.inputCss = def.inputCss;\n    _def.node.outputProps = def.outputProps;\n    _def.node.setup = def.setup;\n    _def.node.frame = def.frame;\n\n    return _def.node;\n}\n\nmodule.exports = Noodl;","'use strict';\n\nvar createStoreImpl = function createStoreImpl(createState) {\n  var state;\n  var listeners = new Set();\n  var setState = function setState(partial, replace) {\n    var nextState = typeof partial === 'function' ? partial(state) : partial;\n    if (!Object.is(nextState, state)) {\n      var _previousState = state;\n      state = (replace != null ? replace : typeof nextState !== 'object') ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach(function (listener) {\n        return listener(state, _previousState);\n      });\n    }\n  };\n  var getState = function getState() {\n    return state;\n  };\n  var subscribe = function subscribe(listener) {\n    listeners.add(listener);\n    return function () {\n      return listeners.delete(listener);\n    };\n  };\n  var destroy = function destroy() {\n    return listeners.clear();\n  };\n  var api = {\n    setState: setState,\n    getState: getState,\n    subscribe: subscribe,\n    destroy: destroy\n  };\n  state = createState(setState, getState, api);\n  return api;\n};\nvar createStore = function createStore(createState) {\n  return createState ? createStoreImpl(createState) : createStoreImpl;\n};\n\nmodule.exports = createStore;\n","export const inputTypeEnums = [\r\n  {\r\n    value: 'string',\r\n    label: 'String'\r\n  },\r\n  {\r\n    value: 'boolean',\r\n    label: 'Boolean'\r\n  },\r\n  {\r\n    value: 'number',\r\n    label: 'Number'\r\n  },\r\n  {\r\n    value: 'object',\r\n    label: 'Object'\r\n  },\r\n  {\r\n    value: 'date',\r\n    label: 'Date'\r\n  },\r\n  {\r\n    value: 'array',\r\n    label: 'Array'\r\n  },\r\n  {\r\n    value: 'color',\r\n    label: 'Color'\r\n  }\r\n]\r\n","//JSON replacer to make cyclic objects non-cyclic.\r\n//Using this example: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value#examples\r\nexport function getCircularReplacer() {\r\n  const seen = new WeakSet();\r\n  return (key, value) => {\r\n    if (typeof value === \"object\" && value !== null) {\r\n      if (seen.has(value)) {\r\n        return \"[Circular]\";\r\n      }\r\n      seen.add(value);\r\n    }\r\n    return value;\r\n  };\r\n}\r\n\r\nexport function toJSON(value) {\r\n  return JSON.stringify(value || {}, getCircularReplacer());\r\n}\r\n\r\nexport function toInspect(value) {\r\n  if (typeof value === 'object') {\r\n    return Object.keys(value).reduce((result, key) => {\r\n      const item = value[key];\r\n      switch (typeof item) {\r\n        case 'object':\r\n          if (Object.keys(item).length > 5) {\r\n            result[key] = \"[Object]\";\r\n          } else {\r\n            result[key] = toJSON(item);\r\n          }\r\n          break;\r\n\r\n        case 'function':\r\n          result[key] = \"[Function]\";\r\n          break;\r\n\r\n        case 'bigint':\r\n        case 'number':\r\n          result[key] = item;\r\n          break;\r\n\r\n        case 'string':\r\n        case 'symbol':\r\n        case 'undefined':\r\n          result[key] = item;\r\n          break;\r\n\r\n        default:\r\n          result[key] = \"[Unknown]\";\r\n          break;\r\n      }\r\n      return result;\r\n    }, {})\r\n  }\r\n  return JSON.stringify(value || {}, getCircularReplacer());\r\n}\r\n\r\nexport function getContextInputProperties(contextNodes, contextName) {\r\n  const dataContexts = contextNodes\r\n    .filter((x) => x.parameters.contextName === contextName);\r\n\r\n  const properties = dataContexts\r\n    .reduce((previous, item) => {\r\n      item.parameters.contextInputs.forEach((prop) => {\r\n        // TODO: Collision if the name is taken\r\n        previous[prop.label] = {\r\n          id: prop.id,\r\n          type: item['intype-' + prop.label] || '*'\r\n        };\r\n      });\r\n      return previous;\r\n    }, {});\r\n\r\n  return properties;\r\n}\r\n\r\nexport function getContextOutputProperties(contextNodes, contextName) {\r\n  const dataContexts = contextNodes\r\n    .filter((x) => x.parameters.contextName === contextName);\r\n\r\n  const properties = dataContexts\r\n    .reduce((previous, item) => {\r\n      item.parameters.contextInputs.forEach((prop) => {\r\n        // TODO: Collision if the name is taken\r\n        previous[prop.label] = {\r\n          id: prop.id,\r\n          type: item['proptype-' + prop.label] || '*',\r\n        };\r\n      });\r\n      return previous;\r\n    }, {});\r\n\r\n  return properties;\r\n}\r\n","import { defineNode } from '@noodl/noodl-sdk';\r\nimport { inputTypeEnums } from '../constants';\r\nimport { toInspect } from '../utils';\r\n\r\nimport create from 'zustand/vanilla'\r\n\r\nconst emptyContextObject = {\r\n  store: null,\r\n  componentId: null,\r\n  componentName: null,\r\n};\r\n\r\nexport function findContext(contextName, nodeScope) {\r\n  if (!window.data_context_context || !window.data_context_context[contextName]) {\r\n    // There is no context created by that name.\r\n    return emptyContextObject;\r\n  }\r\n\r\n  const id = nodeScope.componentOwner.id;\r\n\r\n  // Check if the context exist on this component.\r\n  if (window.data_context_context[contextName][id]) {\r\n    return window.data_context_context[contextName][id];\r\n  }\r\n\r\n  // Inside Popup (Supported after 2.8.1)\r\n  const popupParent = nodeScope.componentOwner.popupParent;\r\n  if (popupParent) {\r\n    if (window.data_context_context[contextName][popupParent.id]) {\r\n      return window.data_context_context[contextName][popupParent.id];\r\n    }\r\n\r\n    return findContext(contextName, popupParent.nodeScope);\r\n  }\r\n\r\n  // Popup function?\r\n  if (nodeScope.componentOwner.parentNodeScope) {\r\n    return findContext(contextName, nodeScope.componentOwner.parentNodeScope);\r\n  }\r\n\r\n  // Check if the context exists on the parent component.\r\n  if (nodeScope.componentOwner.parent) {\r\n    return findContext(contextName, nodeScope.componentOwner.parent.nodeScope);\r\n  }\r\n\r\n  return emptyContextObject;\r\n}\r\n\r\nfunction createContext(contextName, nodeScope, initialState) {\r\n  if (!window.data_context_context) {\r\n    window.data_context_context = {};\r\n  }\r\n\r\n  if (!window.data_context_context[contextName]) {\r\n    window.data_context_context[contextName] = {};\r\n  }\r\n\r\n  // console.debug(`[state][initial]['${contextName}']`, initialState)\r\n\r\n  const id = nodeScope.componentOwner.id;\r\n  window.data_context_context[contextName][id] = {\r\n    store: create(() => initialState),\r\n    componentId: nodeScope.componentOwner.id,\r\n    componentName: nodeScope.componentOwner.name,\r\n  };\r\n}\r\n\r\nexport default defineNode({\r\n  name: 'data_context.context',\r\n  displayName: \"Context\",\r\n  useInputAsLabel: 'contextName',\r\n  color: 'green',\r\n  initialize() {\r\n    this.scheduleAfterInputsHaveUpdated(() => {\r\n      const contextName = this._inputValues.contextName;\r\n      const contextInputs = this._inputValues.contextInputs;\r\n      const initialState = contextInputs ? contextInputs.reduce((result, prop) => {\r\n        result[prop.label] = this.model.parameters['in-' + prop.label];\r\n        return result;\r\n      }, {}) : {};\r\n\r\n      createContext(contextName, this.nodeScope, initialState);\r\n    });\r\n  },\r\n  inputs: {\r\n    contextName: {\r\n      type: {\r\n        name: 'string',\r\n        identifierOf: 'data_context.context',\r\n        identifierDisplayName: 'Contexts'\r\n      },\r\n      displayName: 'Context Name',\r\n      group: 'General',\r\n    },\r\n    contextInputs: {\r\n      type: {\r\n        name: 'proplist',\r\n        allowEditOnly: true\r\n      },\r\n      group: 'Properties',\r\n      set(_value) {\r\n        // no op\r\n      }\r\n    },\r\n  },\r\n  getInspectInfo() {\r\n    const contextName = this._inputValues.contextName;\r\n    const { store } = findContext(contextName, this.nodeScope);\r\n    if (store) {\r\n      return [\r\n        { type: \"value\", value: `Current values:` },\r\n        { type: 'value', value: toInspect(store.getState()) }\r\n      ];\r\n    }\r\n\r\n    return \"[No value set]\";\r\n  },\r\n  setup(context, graphModel) {\r\n    if (!context.editorConnection || !context.editorConnection.isRunningLocally()) {\r\n      return;\r\n    }\r\n\r\n    graphModel.on(\"editorImportComplete\", () => {\r\n      graphModel.on(\"nodeAdded.data_context.context\", function (node) {\r\n        _managePortsForNode(context, node)\r\n\r\n        // TODO: Check duplicates\r\n      })\r\n\r\n      for (const node of graphModel.getNodesWithType('data_context.context')) {\r\n        _managePortsForNode(context, node)\r\n      }\r\n    })\r\n  }\r\n});\r\n\r\nfunction _managePortsForNode(context, node) {\r\n  function _updatePorts() {\r\n    var ports = [];\r\n\r\n    // Inputs\r\n    if (node.parameters.contextInputs && node.parameters.contextInputs.length > 0) {\r\n      node.parameters.contextInputs.forEach((p) => {\r\n        // Type for input\r\n        ports.push({\r\n          name: 'intype-' + p.label,\r\n          displayName: 'Type',\r\n          editorName: p.label + ' | Type',\r\n          plug: 'input',\r\n          type: {\r\n            name: 'enum',\r\n            enums: inputTypeEnums,\r\n            allowEditOnly: true\r\n          },\r\n          default: 'string',\r\n          parent: 'contextInputs',\r\n          parentItemId: p.id\r\n        })\r\n\r\n        // Default Value for input\r\n        ports.push({\r\n          name: 'in-' + p.label,\r\n          displayName: p.label,\r\n          plug: 'input',\r\n          type: node.parameters['intype-' + p.label] || 'string',\r\n          group: 'Inputs'\r\n        })\r\n      })\r\n    }\r\n\r\n    context.editorConnection.sendDynamicPorts(node.id, ports);\r\n  }\r\n\r\n  _updatePorts();\r\n  node.on('parameterUpdated', function (ev) {\r\n    _updatePorts();\r\n  })\r\n}","import { defineNode } from \"@noodl/noodl-sdk\";\r\nimport { inputTypeEnums } from \"../constants\";\r\nimport { findContext } from \"./context\";\r\nimport { toInspect, getContextOutputProperties } from \"../utils\";\r\n\r\nexport default defineNode({\r\n  name: \"data_context.getState\",\r\n  displayName: \"Get State\",\r\n  useInputAsLabel: \"contextName\",\r\n  color: \"green\",\r\n  inputs: {\r\n    contextName: {\r\n      type: {\r\n        name: \"string\",\r\n        identifierOf: \"data_context.context\",\r\n        identifierDisplayName: \"Contexts\",\r\n      },\r\n      displayName: \"Context Name\",\r\n      group: \"General\",\r\n    },\r\n  },\r\n  outputs: {\r\n    success: {\r\n      type: \"signal\",\r\n      displayName: \"Success\",\r\n      group: \"Events\",\r\n    },\r\n    failure: {\r\n      type: \"signal\",\r\n      displayName: \"Failure\",\r\n      group: \"Events\",\r\n    },\r\n  },\r\n  initialize() {\r\n    this._internal = {\r\n      outputValues: {},\r\n    };\r\n  },\r\n  signals: {\r\n    Fetch() {\r\n      const _this = this;\r\n      function updateState(state) {\r\n        Object.keys(state).forEach((prop) => {\r\n          _this.registerOutputIfNeeded(\"prop-\" + prop);\r\n          _this._internal.outputValues[prop] = state[prop];\r\n          _this.flagOutputDirty(\"prop-\" + prop);\r\n        });\r\n      }\r\n\r\n      try {\r\n        const contextName = this._inputValues.contextName;\r\n        const { store, componentId, componentName } = findContext(contextName, this.nodeScope);\r\n\r\n        this._internal.context = {\r\n          componentId,\r\n          componentName\r\n        }\r\n\r\n        const state = store.getState();\r\n        updateState(state);\r\n\r\n        this.sendSignalOnOutput(\"success\");\r\n      } catch (error) {\r\n        console.error(error);\r\n\r\n        this.sendSignalOnOutput(\"failure\");\r\n      }\r\n    },\r\n  },\r\n  methods: {\r\n    registerOutputIfNeeded: function (name) {\r\n      if (this.hasOutput(name)) {\r\n        return;\r\n      }\r\n\r\n      return this.registerOutput(name, {\r\n        getter: function (name) {\r\n          return this._internal.outputValues[name];\r\n        }.bind(this, name.substring(\"prop-\".length)),\r\n      });\r\n    },\r\n  },\r\n  getInspectInfo() {\r\n    return [\r\n      { type: \"value\", value: `Using context:` },\r\n      { type: \"value\", value: this._internal.context || {} },\r\n      { type: \"value\", value: `Current values:` },\r\n      { type: \"value\", value: toInspect(this._internal.outputValues) },\r\n    ];\r\n  },\r\n  setup(context, graphModel) {\r\n    if (\r\n      !context.editorConnection ||\r\n      !context.editorConnection.isRunningLocally()\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // Update the ports when:\r\n    // - Context properties change\r\n    // - Context node is deleted\r\n    // - Get State is created\r\n    // - Get State context name changed\r\n\r\n    graphModel.on(\"editorImportComplete\", function () {\r\n      function parameterUpdated(node, { name, value, state }) {\r\n        if (name !== \"contextName\") return;\r\n\r\n        // Get all contexts and update them based on value which is the contextName\r\n        const contextNodes = graphModel.getNodesWithType(\r\n          \"data_context.context\"\r\n        );\r\n        const inputs = getContextOutputProperties(contextNodes, value);\r\n        updatePortsFromContext(node, inputs, context);\r\n      }\r\n\r\n      // When set state is created\r\n      graphModel.on(\"nodeAdded.data_context.getState\", function (node) {\r\n        const contextNodes = graphModel.getNodesWithType(\r\n          \"data_context.context\"\r\n        );\r\n\r\n        // Update this node, if it already have a contextName\r\n        if (node.parameters.contextName) {\r\n          const inputs = getContextOutputProperties(\r\n            contextNodes,\r\n            node.parameters.contextName\r\n          );\r\n          updatePortsFromContext(node, inputs, context);\r\n        }\r\n\r\n        // Listen to when contextName is changed\r\n        node.on(\"parameterUpdated\", (args) => parameterUpdated(node, args));\r\n      });\r\n\r\n      function updateAll(node) {\r\n        const contextName = node.parameters.contextName;\r\n\r\n        // Get all the contexts with the same contextName,\r\n        // so we combine all the properties into one object\r\n        const contextNodes = graphModel.getNodesWithType(\r\n          \"data_context.context\"\r\n        );\r\n        const inputs = getContextOutputProperties(contextNodes, contextName);\r\n\r\n        // Update all set state nodes\r\n        graphModel\r\n          .getNodesWithType(\"data_context.getState\")\r\n          .filter((x) => x.parameters.contextName === contextName)\r\n          .forEach((node) => {\r\n            updatePortsFromContext(node, inputs, context);\r\n          });\r\n      }\r\n\r\n      // When context is created\r\n      graphModel.on(\"nodeAdded.data_context.context\", function (node) {\r\n        // Listen to parameters are changed\r\n        node.on(\"parameterUpdated\", () => updateAll(node));\r\n\r\n        // Listen to when a context is deleted\r\n        node.on(\"nodeRemoved\", () => updateAll(node));\r\n      });\r\n\r\n      const nodes = graphModel.getNodesWithType(\"data_context.getState\");\r\n      nodes.forEach((node) => {\r\n        updateAll(node);\r\n        node.on(\"parameterUpdated\", (args) => parameterUpdated(node, args));\r\n      });\r\n    });\r\n  },\r\n});\r\n\r\nfunction updatePortsFromContext(node, contextParameters, context) {\r\n  const ports = [];\r\n\r\n  for (const label in contextParameters) {\r\n    // Type for output\r\n    ports.push({\r\n      name: \"proptype-\" + label,\r\n      displayName: \"Type\",\r\n      editorName: label + \" | Type\",\r\n      plug: \"input\",\r\n      type: {\r\n        name: \"enum\",\r\n        enums: inputTypeEnums,\r\n        allowEditOnly: true,\r\n      },\r\n      default: \"string\",\r\n      parent: \"contextInputs\",\r\n      parentItemId: contextParameters[label].id,\r\n    });\r\n\r\n    // Value for output\r\n    ports.push({\r\n      name: \"prop-\" + label,\r\n      displayName: label,\r\n      plug: \"output\",\r\n      type: contextParameters[label].type,\r\n      group: \"Properties\",\r\n    });\r\n  }\r\n\r\n  context.editorConnection.sendDynamicPorts(node.id, ports, {\r\n    detectRenamed: {\r\n      plug: \"output\",\r\n    },\r\n  });\r\n}\r\n","import { defineNode } from '@noodl/noodl-sdk';\r\nimport { findContext } from './context';\r\nimport { getContextInputProperties } from '../utils';\r\n\r\nexport default defineNode({\r\n  name: 'data_context.setState',\r\n  displayName: \"Set State\",\r\n  useInputAsLabel: 'contextName',\r\n  color: 'green',\r\n  inputs: {\r\n    contextName: {\r\n      type: {\r\n        name: 'string',\r\n        identifierOf: 'data_context.context',\r\n        identifierDisplayName: 'Contexts'\r\n      },\r\n      displayName: 'Context Name',\r\n      group: 'General',\r\n    },\r\n  },\r\n  outputs: {\r\n    success: {\r\n      type: 'signal',\r\n      displayName: \"Success\",\r\n      group: \"Events\"\r\n    },\r\n    failure: {\r\n      type: 'signal',\r\n      displayName: \"Failure\",\r\n      group: \"Events\"\r\n    },\r\n  },\r\n  signals: {\r\n    Do() {\r\n      const newState = this._internal;\r\n\r\n      const contextName = this._inputValues.contextName;\r\n      const { store } = findContext(contextName, this.nodeScope);\r\n      if (store) {\r\n        store.setState((state) => ({\r\n          ...newState\r\n        }));\r\n        this.sendSignalOnOutput(\"success\");\r\n      } else {\r\n        this.sendSignalOnOutput(\"failure\");\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    registerInputIfNeeded: function (name) {\r\n      if (this.hasInput(name)) {\r\n        return;\r\n      }\r\n\r\n      if (name.startsWith(\"prop-\")) {\r\n        this.registerInput(name, {\r\n          set: function (value) {\r\n            const key = name.substring(\"prop-\".length);\r\n            this._internal[key] = value;\r\n          }\r\n        });\r\n      }\r\n    },\r\n  },\r\n  getInspectInfo() {\r\n    const contextName = this._inputValues.contextName;\r\n    const { componentId, componentName } = findContext(contextName, this.nodeScope);\r\n\r\n    return [\r\n      { type: \"value\", value: `Will update:` },\r\n      {\r\n        type: \"value\",\r\n        value: {\r\n          componentId,\r\n          componentName,\r\n        }\r\n      },\r\n    ];\r\n  },\r\n  setup(context, graphModel) {\r\n    if (!context.editorConnection || !context.editorConnection.isRunningLocally()) {\r\n      return;\r\n    }\r\n\r\n    graphModel.on(\"editorImportComplete\", function () {\r\n      function parameterUpdated(node, { name, value, state }) {\r\n        if (name !== \"contextName\") return;\r\n\r\n        // Get all contexts and update them based on value which is the contextName\r\n        const contextNodes = graphModel.getNodesWithType(\r\n          \"data_context.context\"\r\n        );\r\n        const inputs = getContextInputProperties(contextNodes, value);\r\n        updatePortsFromContext(node, inputs, context);\r\n      }\r\n\r\n      // When set state is created\r\n      graphModel.on(\"nodeAdded.data_context.setState\", function (node) {\r\n        const contextNodes = graphModel.getNodesWithType(\r\n          \"data_context.context\"\r\n        );\r\n\r\n        // Update this node, if it already have a contextName\r\n        if (node.parameters.contextName) {\r\n          const inputs = getContextInputProperties(\r\n            contextNodes,\r\n            node.parameters.contextName\r\n          );\r\n          updatePortsFromContext(node, inputs, context);\r\n        }\r\n\r\n        // Listen to when contextName is changed\r\n        node.on(\"parameterUpdated\", (args) => parameterUpdated(node, args));\r\n      });\r\n\r\n      function updateAll(node) {\r\n        const contextName = node.parameters.contextName;\r\n\r\n        // Get all the contexts with the same contextName,\r\n        // so we combine all the properties into one object\r\n        const contextNodes = graphModel.getNodesWithType(\r\n          \"data_context.context\"\r\n        );\r\n        const inputs = getContextInputProperties(contextNodes, contextName);\r\n\r\n        // Update all set state nodes\r\n        graphModel\r\n          .getNodesWithType(\"data_context.setState\")\r\n          .filter((x) => x.parameters.contextName === contextName)\r\n          .forEach((node) => {\r\n            updatePortsFromContext(node, inputs, context);\r\n          });\r\n      }\r\n\r\n      // When context is created\r\n      graphModel.on(\"nodeAdded.data_context.context\", function (node) {\r\n        // Listen to parameters are changed\r\n        node.on(\"parameterUpdated\", () => updateAll(node));\r\n\r\n        // Listen to when a context is deleted\r\n        node.on(\"nodeRemoved\", () => updateAll(node));\r\n      });\r\n\r\n      const nodes = graphModel.getNodesWithType(\r\n        \"data_context.setState\"\r\n      );\r\n      nodes.forEach((node) => {\r\n        updateAll(node);\r\n        node.on(\"parameterUpdated\", (args) => parameterUpdated(node, args));\r\n      });\r\n    });\r\n  }\r\n});\r\n\r\nfunction updatePortsFromContext(node, contextParameters, context) {\r\n  const ports = [];\r\n\r\n  for (const label in contextParameters) {\r\n    ports.push({\r\n      name: 'prop-' + label,\r\n      displayName: label,\r\n      plug: 'input',\r\n      type: {\r\n        name: contextParameters[label].type,\r\n        allowConnectionsOnly: true,\r\n      },\r\n      group: 'Properties',\r\n    })\r\n  }\r\n\r\n  context.editorConnection.sendDynamicPorts(node.id, ports, {\r\n    detectRenamed: {\r\n      plug: \"input/output\",\r\n    },\r\n  });\r\n}\r\n","import { defineNode } from \"@noodl/noodl-sdk\";\r\nimport { inputTypeEnums } from \"../constants\";\r\nimport { findContext } from \"./context\";\r\nimport { toInspect, getContextOutputProperties } from \"../utils\";\r\n\r\nexport default defineNode({\r\n  name: \"data_context.subscriber\",\r\n  displayName: \"Subscriber\",\r\n  useInputAsLabel: \"contextName\",\r\n  color: \"green\",\r\n  inputs: {\r\n    contextName: {\r\n      type: {\r\n        name: \"string\",\r\n        identifierOf: \"data_context.context\",\r\n        identifierDisplayName: \"Contexts\",\r\n      },\r\n      displayName: \"Context Name\",\r\n      group: \"General\",\r\n    },\r\n  },\r\n  outputs: {\r\n    contextName: {\r\n      type: 'string',\r\n      displayName: \"Context Name\",\r\n      group: \"Subscriber\"\r\n    },\r\n    isSubscribed: {\r\n      type: 'boolean',\r\n      displayName: \"Is Subscribed\",\r\n      group: \"Subscriber\"\r\n    },\r\n    subscribed: {\r\n      type: 'signal',\r\n      displayName: \"Subscribed\",\r\n      group: \"Events\"\r\n    },\r\n    changed: {\r\n      type: 'signal',\r\n      displayName: \"Changed\",\r\n      group: \"Events\"\r\n    },\r\n  },\r\n  initialize() {\r\n    this._internal = {\r\n      outputValues: {},\r\n    };\r\n\r\n    this.setOutputs({ isSubscribed: false });\r\n\r\n    const _this = this;\r\n    this._internal.updateState = function (state) {\r\n      Object.keys(state).forEach((prop) => {\r\n        _this.registerOutputIfNeeded(\"prop-\" + prop);\r\n        _this._internal.outputValues[prop] = state[prop];\r\n        _this.flagOutputDirty(\"prop-\" + prop);\r\n      });\r\n      _this.sendSignalOnOutput(\"changed\");\r\n    }\r\n\r\n    this.scheduleAfterInputsHaveUpdated(() => {\r\n      _this.subscribe();\r\n    });\r\n  },\r\n  signals: {\r\n    Resubscribe() {\r\n      this.unsubscribe();\r\n      this.subscribe();\r\n    }\r\n  },\r\n  changed: {\r\n    contextName() {\r\n      this.setOutputs({ contextName: this._inputValues.contextName });\r\n      this.unsubscribe();\r\n      this.subscribe();\r\n    }\r\n  },\r\n  methods: {\r\n    unsubscribe() {\r\n      if (!this._internal.store) return;\r\n\r\n      this._internal.store.unsubscribe(this._internal.updateState);\r\n      this._internal.store = null;\r\n      this._internal.context = {\r\n        componentId: null,\r\n        componentName: null\r\n      };\r\n      this._internal.outputValues = {};\r\n      this.flagDirty();\r\n      this.setOutputs({ isSubscribed: false });\r\n    },\r\n    subscribe() {\r\n      const contextName = this._inputValues.contextName;\r\n      const { store, componentId, componentName } = findContext(contextName, this.nodeScope);\r\n      if (store) {\r\n        this._internal.store = store;\r\n        this._internal.context = {\r\n          componentId,\r\n          componentName\r\n        };\r\n\r\n        store.subscribe(this._internal.updateState);\r\n\r\n        const state = store.getState();\r\n        this._internal.updateState(state);\r\n\r\n        // Lets to it at the end, so there will be time to get the state\r\n        this.setOutputs({ isSubscribed: true });\r\n        this.sendSignalOnOutput(\"subscribed\");\r\n      }\r\n    },\r\n    registerOutputIfNeeded: function (name) {\r\n      if (this.hasOutput(name)) {\r\n        return;\r\n      }\r\n\r\n      return this.registerOutput(name, {\r\n        getter: function (name) {\r\n          return this._internal.outputValues[name];\r\n        }.bind(this, name.substring(\"prop-\".length)),\r\n      });\r\n    },\r\n  },\r\n  getInspectInfo() {\r\n    return [\r\n      { type: \"value\", value: `Using context:` },\r\n      { type: \"value\", value: this._internal.context },\r\n      { type: \"value\", value: `Current values:` },\r\n      { type: \"value\", value: toInspect(this._internal.outputValues) },\r\n    ];\r\n  },\r\n  setup(context, graphModel) {\r\n    if (\r\n      !context.editorConnection ||\r\n      !context.editorConnection.isRunningLocally()\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    graphModel.on(\"editorImportComplete\", function () {\r\n      function parameterUpdated(node, { name, value, state }) {\r\n        if (name !== \"contextName\") return;\r\n\r\n        // Get all contexts and update them based on value which is the contextName\r\n        const contextNodes = graphModel.getNodesWithType(\r\n          \"data_context.context\"\r\n        );\r\n        const inputs = getContextOutputProperties(contextNodes, value);\r\n        updatePortsFromContext(node, inputs, context);\r\n      }\r\n\r\n      // When set state is created\r\n      graphModel.on(\"nodeAdded.data_context.subscriber\", function (node) {\r\n        const contextNodes = graphModel.getNodesWithType(\r\n          \"data_context.context\"\r\n        );\r\n\r\n        // Update this node, if it already have a contextName\r\n        if (node.parameters.contextName) {\r\n          const inputs = getContextOutputProperties(\r\n            contextNodes,\r\n            node.parameters.contextName\r\n          );\r\n          updatePortsFromContext(node, inputs, context);\r\n        }\r\n\r\n        // Listen to when contextName is changed\r\n        node.on(\"parameterUpdated\", (args) => parameterUpdated(node, args));\r\n      });\r\n\r\n      function updateAll(node) {\r\n        const contextName = node.parameters.contextName;\r\n\r\n        // Get all the contexts with the same contextName,\r\n        // so we combine all the properties into one object\r\n        const contextNodes = graphModel.getNodesWithType(\r\n          \"data_context.context\"\r\n        );\r\n        const inputs = getContextOutputProperties(contextNodes, contextName);\r\n\r\n        // Update all set state nodes\r\n        graphModel\r\n          .getNodesWithType(\"data_context.subscriber\")\r\n          .filter((x) => x.parameters.contextName === contextName)\r\n          .forEach((node) => {\r\n            updatePortsFromContext(node, inputs, context);\r\n          });\r\n      }\r\n\r\n      // When context is created\r\n      graphModel.on(\"nodeAdded.data_context.context\", function (node) {\r\n        // Listen to parameters are changed\r\n        node.on(\"parameterUpdated\", () => updateAll(node));\r\n\r\n        // Listen to when a context is deleted\r\n        node.on(\"nodeRemoved\", () => updateAll(node));\r\n      });\r\n\r\n      const nodes = graphModel.getNodesWithType(\r\n        \"data_context.subscriber\"\r\n      );\r\n      nodes.forEach((node) => {\r\n        updateAll(node);\r\n        node.on(\"parameterUpdated\", (args) => parameterUpdated(node, args));\r\n      });\r\n    });\r\n  },\r\n});\r\n\r\nfunction updatePortsFromContext(node, contextParameters, context) {\r\n  const ports = [];\r\n\r\n  for (const label in contextParameters) {\r\n    // Type for output\r\n    ports.push({\r\n      name: \"proptype-\" + label,\r\n      displayName: \"Type\",\r\n      editorName: label + \" | Type\",\r\n      plug: \"input\",\r\n      type: {\r\n        name: \"enum\",\r\n        enums: inputTypeEnums,\r\n        allowEditOnly: true,\r\n      },\r\n      default: \"string\",\r\n      parent: \"contextInputs\",\r\n      parentItemId: contextParameters[label].id,\r\n    });\r\n\r\n    // Value for output\r\n    ports.push({\r\n      name: \"prop-\" + label,\r\n      displayName: label,\r\n      plug: \"output\",\r\n      type: contextParameters[label].type,\r\n      group: \"Properties\",\r\n    });\r\n  }\r\n\r\n  context.editorConnection.sendDynamicPorts(node.id, ports, {\r\n    detectRenamed: {\r\n      plug: \"output\",\r\n    },\r\n  });\r\n}\r\n","import { defineModule } from '@noodl/noodl-sdk';\r\n\r\nimport Context from './nodes/context';\r\nimport getState from './nodes/getState';\r\nimport setState from './nodes/setState';\r\nimport Subscriber from './nodes/subscriber';\r\n\r\ndefineModule({\r\n\tnodes: [Context, getState, setState, Subscriber]\r\n});\r\n"],"sourceRoot":""}